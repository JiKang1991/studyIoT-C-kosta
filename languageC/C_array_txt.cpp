// 배열

/* 배열이란?
	- 둘 이상의 변수를 동시에 선언하는 효과를 지닌다.
	- 많은 양의 데이터를 일괄적으로 처리해야 하는 경우에 유용하다.
	- 지역적 특성을 지닐 수도 있고, 전역적 특성을 지닐 수도 있다. */
	
/* 배열 선언에 있어서 필요한 것 3가지
	ex) int array[10];
	- 배열요소 자료형 : 배열을 구성하는 변수의 자료형 ex) int 
	- 배열 이름 : 배열에 접근할 때 사용되는 이름 ex) array
	- 브라켓 : 배열의 크기를 명시적으로 컴파일러에게 알린다. [] 
	- 배열 길이 : 배열을 구성하는 변수의 개수 ex) 10 */
	
/* 1차원 배열
	- 배열 요소에는 인덱스로 접근한다. 
	- 인덱스는 0부터 */ 
	
/* 배열 선언 예시
	int main(void) {
		int array[10];		// 배열 선언
		array[0] = 10;		// 첫 번째 요소 접근
		array[1] = 20;		// 두 번째 요소 접근
		array[2] = 30; 		// 세 번째 요소 접근
		...
		retrun 0;
	}
	- 브라켓 내부에는 상수 뿐만 아니라 변수도 적용할 수 있다.
		ex) array[s] = 10;	->	S + 1 번째 요소에 10을 대입하라 */
		
/* 선언과 동시에 초기화
	int main(void){
		int arr1[5] = {1, 2, 3, 4, 5};
		int arr2[] = {1, 3, 5, 7, 9};		//  브라켓에 배열의 크기를 명시하지 않더라도 생성이 가능하다 
		int arr3[5] = {1, 2};				//  5개 요소를 가지고 있는 배열을 생성하고 나머지는 쓰레기값이 저장된다.
	}
*/

/* 문자열 상수
	- 문자열이면서 상수의 특징을 지닌다.
	- 문자 = 1byte char ( ASCII 참고 )
	- 문자열 = char array + null(0) 
	ex) printf("Hello World! \n");	
*/

/* 문자열 변수
	- 문자열이면서 변수의 특징을 지닌다.
	ex) char str1[5] = "Good";	-> str[0] = "G", str[1] = "o", str[2] = "o", str[3] = "d", str[4] = 0
		char str2[]	= "morning"; -> str2[0] ~ str[6] = "morning", str2[7] = 0
*/

/* 문자열과 char형 배열의 차이점
	char arr1[] = "abc";					// 정상 출력 
	char arr2[] = {'a', 'b', 'c'};			// 비정상 출력 
	char arr3[] = {'a', 'b', 'c', '\0'}; 	// 정상 출력, \0 = null ASCII 값으로 0 
*/ 

/* 다차원 배열
	- 2차원 이상의 배열
	- 다차원 배열의 선언
		ex)
			int arr[100]		1차원 배열 
			int arr[10][10]		10x10 2차원 배열
			int arr[5][5][5]	5x5x5, 3차원 배열	
*/

/* 2차원 배열의 접근방법
	int main() {
		int arr[3][3];
		arr[0][0] = 2;
		arr[1][0] = 4;
		arr[2][2] = 8;
	}
*/

/* 2차원 배열의 초기화
	int arr[3][3] = {
		{1, 2, 3},
		{1, 2, 3},
		{1, 2, 3}
	};
	
	int arr[3][3] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	-> {1, 2, 3} {4, 5, 6} {7, 8, 9}
*/

/* 3차원 배열 */ 
	
	
	
	
	
